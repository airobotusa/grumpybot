package main

import (
	"flag"
	"fmt"

	"github.com/nlopes/slack"
)

var token = flag.String("token", "", "bot token generated by slack")
var debug = flag.Bool("debug", false, "set to show debugging messages")

func main() {
	flag.Parse()

	if *token == "" {
		fmt.Println("Please set -token flag")
		flag.PrintDefaults()
		return
	}
	api := slack.New(*token)
	api.SetDebug(*debug)
	rtm := api.NewRTM()
	go rtm.ManageConnection()

Loop:
	for {
		select {
		case msg := <-rtm.IncomingEvents:
			switch ev := msg.Data.(type) {
			case *slack.MessageEvent:
				if len(ev.Text) > 0 && playgroundUrl.MatchString(ev.Text) {
					addrs := playgroundUrl.FindAllString(ev.Text, -1)
					for _, addr := range addrs {
						data, err := playground(addr)
						if err != nil {
							fmt.Println("Playground error:", err)
							continue
						}
						rtm.SendMessage(rtm.NewOutgoingMessage(data, ev.Channel))
					}
				}
			case *slack.InvalidAuthEvent:
				fmt.Printf("Invalid credentials")
				break Loop
			default:
				// Ignore other events..
			}
		}
	}

}
